.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.40.7.
.TH CSPRNG-GENERATE "1" "June 2012" "csprng-generate version 1.0" "User Commands"
.SH NAME
csprng-generate \- manual page for csprng-generate version 1.0
.SH SYNOPSIS
.B csprng-generate
[\fIOPTION\fR...]
.SH DESCRIPTION
Utility to write stream of random bytes to STDOUT or to the file.
.TP
\fB\-\-entropy_file\fR=\fIFILE\fR
Use FILE as the source of RANDOM bytes for
CTR_DRBG entropy input. It implies
\fB\-\-entropy\-source\fR=\fIEXTERNAL\fR
.TP
\fB\-\-entropy_source\fR=\fISOURCE\fR
Specify SOURCE of RANDOM bytes for CTR_DRBG
entropy input instead of HAVEGE algorithm. One of
the following can be used
HAVEGE|SHA1_RNG|MT_RNG|STDIN|EXTERNAL. Default:
HAVEGE.
.TP
\fB\-n\fR, \fB\-\-number\fR=\fIBYTES\fR
Number of output BYTES, prefixes [k|m|g|t] for
kibi, mebi, gibi and tebi are supported. Default:
unlimited stream
.TP
\fB\-o\fR, \fB\-\-output\fR=\fIFILE\fR
Output to FILE. Default: output goes to standard
output
.TP
\fB\-v\fR, \fB\-\-verbose\fR
Verbosity level. Two verbosity levels are
supported. Second level (most verbose) is
activated with '\-v \fB\-v\fR'
.TP
\fB\-\-write_statistics\fR=\fIN\fR
Write to stderr number of generated bytes and
results of FIPS tests every "N" seconds. 0 to
disable. Default: disabled
.IP
FIPS 140\-2 validation:
.TP
\fB\-f\fR, \fB\-\-fips\fR
Only data valiadated by FIPS 140\-2 random number
tests are written out. Default: no FIPS 140\-2
tests are performed. Please note that parameter
has big impact on performance. On test system,
performance went down from 170MB/s to 17 MB/s
after enabling FIPS valiadation.
.TP
\fB\-\-output\-fips\-init\fR
Write\-out 32\-bits used to initialize FIPS 140\-2
tests. This is to sync with rngtest tool. Default:
do not write out these bits
.IP
Mode of operation of CTR_DRBG:
.TP
\fB\-d\fR, \fB\-\-derivation_function\fR
Use DERIVATION FUNCTION. It will process HAVEGE
output through DERIVATION FUNCTION before
reseed/change the state of CTR_DRBG. Default:
DERIVATION FUNCTION is not used
.TP
\fB\-\-additional_file\fR=\fIFILE\fR Use FILE as source of RANDOM bytes for CTR_DRBG
additional_input. It implies
\fB\-\-additional_source\fR=\fIEXTERNAL\fR.
.TP
\fB\-\-additional_source\fR=\fISOURCE\fR
Use additional input. Specify SOURCE of
RANDOM bytes for CTR_DRBG additional input. One of
the following can be used
NONE|HAVEGE|SHA1_RNG|MT_RNG|STDIN|EXTERNAL.
Default: NONE.
.TP
\fB\-m\fR, \fB\-\-max_num_of_blocks\fR=\fIMAX\fR
Maximum number MAX of CTR_DRBG blocks produced
before reseed is performed. Default: 512
.TP
\fB\-r\fR, \fB\-\-randomize_num_of_blks\fR
Randomize number of CTR_DRBG blocks produced
before reseed is performed. When enabled, uniform
random distribution [1,MAX] is used to get the
number of generated CTR_DRBG blocks between
reseeds. Default: MAX of CTR_DRBG blocks is
produced each time
.IP
HAVEGE parameters:
.TP
\fB\-\-havege_data_cache_size\fR=\fISIZE\fR
CPU data cache SIZE in KiB. Default: auto
detected.
.TP
\fB\-\-havege_inst_cache_size\fR=\fISIZE\fR
CPU instruction cache size in KiB. Default: auto
detected.
.TP
\-?, \fB\-\-help\fR
Give this help list
.TP
\fB\-\-usage\fR
Give a short usage message
.TP
\fB\-V\fR, \fB\-\-version\fR
Print program version
.PP
Mandatory or optional arguments to long options are also mandatory or optional
for any corresponding short options.
.SH EXAMPLES
csprng\-generate \fB\-v\fR \fB\-n\fR 10.5M \fB\-o\fR /tmp/random
.IP
Write 10.5MB of random data to the file /tmp/random
.PP
(csprng\-generate \fB\-n\fR 2000 | tr \fB\-cd\fR '[:graph:]' | fold \fB\-w\fR 20 && echo )|head \fB\-20\fR
.IP
Generate 20 random ASCII passwords of the length 20 characters
.PP
(csprng\-generate \fB\-n\fR 2000 \fB\-\-entropy_source\fR=\fIMT_RNG\fR | tr \fB\-cd\fR '[:alnum:]' | fold \fB\-w\fR
20 && echo )|head \fB\-20\fR
.IP
Generate 20 random passwors of length 20 build from all letters and digits.
Use Mersenne Twister generator (instead of HAVEGE) as the entropy source.
.PP
csprng\-generate \fB\-f\fR \fB\-r\fR \fB\-m16\fR \fB\-n\fR 3705 | uuencode \fB\-m\fR \- | head \fB\-n\fR 66 | tail \fB\-n\fR 65 |
gpg \fB\-\-symmetric\fR \fB\-a\fR > keyfile.gpg
.IP
Create GPG encrypted keyfile for aespipe. Encrypt:
tar cvf \- files... | bzip2 | aespipe \fB\-w\fR 10 \fB\-K\fR keyfile.gpg >archive.aes
Decrypt: aespipe \fB\-d\fR \fB\-K\fR keyfile.gpg < /tmp/archive.aes | bzip2 \fB\-d\fR \fB\-q\fR | tar tvf
.PP
\-
.PP
csprng\-generate \fB\-\-additional_source\fR=\fISHA1_RNG\fR \fB\-f\fR \fB\-r\fR \fB\-m\fR 16 \fB\-v\fR | cat \fB\-A\fR
.IP
Produce FIPS validated random numbers. CSPRNG generator will produce maximum
of 16 CTR_DRBG blocks between reseeds.
It will use HAVEGE RNG as entropy source and SHA1 RNG as additional input
source to update the state of CSPRNG generator.
.PP
time csprng\-generate \fB\-f\fR \fB\-v\fR \fB\-\-additional_file=\fR/dev/urandom \fB\-n3\fR.5G \fB\-o\fR /dev/null
\fB\-\-write_statistics\fR=\fI2\fR
.IP
Measure time to generate 3.5G of FIPS valaidated random numbers. Use data
from /dev/urandom to update state of CSPRNG generator. Write statistics to
.PP
stderr every 2 seconds.
.PP
csprng\-generate \fB\-d\fR \fB\-m8\fR \fB\-r\fR \fB\-\-additional_source\fR=\fISHA1_RNG\fR | cat \fB\-A\fR
.IP
Produce endless stream of high quality random numbers. CSPRNG generator will
process HAVEGE hardware random numbers and SHA1_RNG random numbers through
derivation function first before updating it's state. Furthermore, maximum
of 8 CTR_DRBG blocks will be produced between reseeds
.PP
csprng\-generate | dieharder \fB\-g\fR 200 \fB\-a\fR
.IP
Test the randomness of the generated data with dieharder test suite
.PP
csprng\-generate \fB\-\-entropy_file=\fR/dev/hwrng \fB\-\-additional_source\fR=\fISHA1_RNG\fR \fB\-d\fR \fB\-f\fR
.IP
This shows how to use csprng\-generate es replacement of rngtest/rngd.
Random bytes from any hardware random generator (/dev/hwrng in this example)
are preprocessed through derivation function and used as entropy source
for CSPRNG generator. Furthermore, SHA1_RNG crypthographically secured
random generator is used as additional input. Again, it's preprocessed
through derivation function first. Finally, only blocks passing
FIPS 140\-2 tests are sent to the output. Please note
the advantage over the rngtest/rngd. Output data are guaranteed to be
cryptographically secure. The generator acts as entropy expander.
.PP
PIPE=$(mktemp \fB\-\-dry\-run\fR) ; mkfifo ${PIPE}; csprng\-generate \fB\-o\fR ${PIPE} &
csprng\-generate | csprng\-generate \fB\-\-entropy_file=\fR${PIPE}
\fB\-\-additional_source\fR=\fISTDIN\fR \fB\-v\fR |
dieharder \fB\-g\fR 200 \fB\-a\fR ; rm ${PIPE}
.IP
Advanced example where one csprng\-generate process is used to supply entropy
via named pipe and other csprng\-generate process is used to supply
additional input via STDIN to the main csprng\-generate process.
Please note that CSPRNG acts as the entropy expander. For this example
64 bytes of entropy input and 128 bytes of additional input are consumed
to generate 16384 output bytes.
.SH AUTHOR
Written by Jirka Hladky
.SH "REPORTING BUGS"
Report bugs to <hladky DOT jiri AT gmail DOT com>.
.SH COPYRIGHT
Copyright \(co 2011\-2012 by Jirka Hladky
.PP
.br
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
