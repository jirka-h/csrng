.\" DO NOT MODIFY THIS FILE!  It was generated by help2man 1.40.7.
.TH CSPRNGD "8" "November 2012" "csprngd daemon version 1.0" "System Administration Utilities"
.SH NAME
csprngd \- manual page for csprngd daemon version 1.0
.SH SYNOPSIS
.B csprngd
[\fIOPTION\fR...]
.SH DESCRIPTION
Daemon to feed entropy from cryptographically secure pseudo\-random number
generator to the kernel entropy pool.
.IP
Operation mode options
.TP
\fB\-\-foreground\fR
Run in the foreground.
.TP
\fB\-\-no\-fips\fR
Turn off FIPS 140\-2 random number tests
validation. Default: only data passing FIPS 140\-2
random number tests are sent to the kernel entropy
pool.
.TP
\fB\-p\fR, \fB\-\-pidfile\fR=\fIfile\fR
Path to the PID file for daemon mode.
.TP
\fB\-v\fR, \fB\-\-verbose\fR
Verbosity level. Two verbosity levels are
supported. Second level (most verbose) is
activated with '\-v \fB\-v\fR'
.TP
\fB\-\-write_statistics\fR=\fIN\fR
Write statistics about the number of provided
bytes & entropy and results of FIPS tests every
"N" seconds. 0 to disable. Default: 3600s. Output
of statistics can be forced anytime by sending
SIGUSR1 signal.
.IP
Cryptographically secure pseudo random number generator options
.TP
\fB\-\-entropy_file\fR=\fIFILE\fR
Use FILE as the source of the RANDOM bytes for
CTR_DRBG entropy input. It implies
\fB\-\-entropy\-source\fR=\fIEXTERNAL\fR
.TP
\fB\-\-entropy_source\fR=\fISOURCE\fR
Specify SOURCE of RANDOM bytes for CTR_DRBG
entropy input. One of the following can be used:
HAVEGE|SHA1_RNG|MT_RNG|HTTP_RNG|STDIN|EXTERNAL.
Please note that HTTP_RNG will retrieve random
data from the web. It's recommended to register at
http://random.irb.hr/ and define login credentials
using environment variables QRBG_USER=name and
QRBG_PASSWD=password. For HTTP_RNG consider using
\fB\-\-derivation_function\fR and
\fB\-\-max_num_of_blocks\fR=\fI16384\fR or higher to compensate
for the low speed of the HTTP_RNG (approximately
200B/s). Default: HAVEGE.
.TP
\fB\-d\fR, \fB\-\-derivation_function\fR
Use DERIVATION FUNCTION. It will process entropy
and \- when enabled \- also additional input through
DERIVATION FUNCTION before reseed/change the state
of CTR_DRBG. Default: DERIVATION FUNCTION is not
used
.TP
\fB\-\-additional_file\fR=\fIFILE\fR Use FILE as source of RANDOM bytes for CTR_DRBG
additional_input. It implies
\fB\-\-additional_source\fR=\fIEXTERNAL\fR.
.TP
\fB\-\-additional_source\fR=\fISOURCE\fR
Use additional input and specify the SOURCE
of the RANDOM bytes for CTR_DRBG additional input.
One of the following can be used:
NONE|HAVEGE|SHA1_RNG|MT_RNG|STDIN|EXTERNAL. Please
note that HTTP_RNG is not a good choice if you
need to generate big amount of data. It's
recommended to use \fB\-\-entropy_source\fR=\fIHTTP_RNG\fR
instead. Default: NONE (additional input is not
used).
.TP
\fB\-m\fR, \fB\-\-max_num_of_blocks\fR=\fIMAX\fR
Maximum number MAX of the CTR_DRBG blocks
produced before reseed is performed. Setting
higher number will reduce the amount of entropy
bytes needed. Number of additional input bytes
will be reduced only to max_num_of_blocks=4096.
Default: 512 blocks.
.TP
\fB\-\-no\-randomize_num_of_blks\fR
Produce MAX of CTR_DRBG blocks each time.
Default: uniform random distribution [1,MAX] is
used to get the number of generated CTR_DRBG
blocks between reseeds.
.IP
Output options
.TP
\fB\-e\fR, \fB\-\-entropy_per_bit\fR=\fIN\fR
Entropy per bit of data written to the kernel
entropy pool. Default 1.0. Allowed values
0.7<N<=1.0
.TP
\fB\-\-min_entropy\fR=\fIN\fR
Minimum number of entropy "N" written to the
kernel random device at one time. Default: entropy
64. (which is equal to 8 bytes when
entropy_per_bit == 1.
.TP
\fB\-o\fR, \fB\-\-random\-device\fR=\fIfile\fR
Kernel device used for entropy output. Default:
/dev/random
.TP
\fB\-t\fR, \fB\-\-fill\-interval\fR=\fIN\fR
When kernel entropy level is bigger than value
specified at
/proc/sys/kernel/random/write_wakeup_threshold
then write to the kernel random device every "N"
seconds. 0 to disable. Default: 30s.
.TP
\fB\-u\fR, \fB\-\-upper_limit\fR=\fIN\fR
Level "N" to which entropy level should be
filled\-up. "N" is the absolute number of bits or a
percentage of the kernel pool size. Default: 50%.
Allowed range:
0 <= N <=<kernel random pool size> or
0% <= N <= 100%
.IP
HAVEGE parameters
.TP
\fB\-\-havege_data_cache_size\fR=\fISIZE\fR
CPU data cache SIZE in KiB. Default: auto
detected.
.TP
\fB\-\-havege_inst_cache_size\fR=\fISIZE\fR
CPU instruction cache size in KiB. Default: auto
detected.
.TP
\-?, \fB\-\-help\fR
Give this help list
.TP
\fB\-\-usage\fR
Give a short usage message
.TP
\fB\-V\fR, \fB\-\-version\fR
Print program version
.PP
Mandatory or optional arguments to long options are also mandatory or optional
for any corresponding short options.
.SH EXAMPLES
csprngd \fB\-p\fR /var/run/csprngd.pid
.IP
Run the daemon to refill the entropy. PID file will be stored
at /var/run/csprngd.pid. The operation is logged via syslog
and can be usually tracked at /var/log/syslog
.PP
csprngd \fB\-v\fR \fB\-v\fR \fB\-\-foreground\fR \fB\-\-write_statistics\fR=\fI30\fR
.IP
Run in the foreground in the most verbose mode
and output statics information every 30 seconds on the stderr
.PP
csprngd \fB\-\-upper_limit\fR=\fI75\fR%
.IP
Fill entropy level up to 75% of kernel entropy pool\-size. This is more
aggressive than the default mode. While offering slightly better performance,
the kernel entropy pool will be dominated by csprngd data.
See /proc/sys/kernel/random/poolsize for the kernel entropy poolsize.
.PP
csprngd \fB\-\-fill\-interval\fR=\fI10\fR
.IP
Refill kernel's entropy at least every 10 seconds to 50% of the kernel
entropy pool size. Using this, available entropy will stay close to
50% of the kernel entropy pool size. The kernel entropy pool
will be dominated by csprngd data. Without \fB\-\-fill\-interval\fR
entropy will be refilled only when it drops bellow value
specified at /proc/sys/kernel/random/write_wakeup_threshold
.PP
csprngd \fB\-\-derivation_function\fR \fB\-\-additional_source\fR=\fISHA1_RNG\fR
.IP
Use built\-in SHA1_RNG generator as additional input to DRBG. Both HAVEGE and
SHA1_RNG outputs are first processed through derivation function before
used to update the state of DRBG. This offers higher security compared
to the default behaviour where only HAVEGE is used to update DRBG
.PP
csprngd \fB\-\-entropy_file=\fR/dev/hwrng
.IP
Use csprngd as replacement for rngd. /dev/hwrng is used to model True Random
Generator (TRNG). Any other file/device can be used instead.
Data from TRNG are used to update the state of DRBG. DRBG works
as entropy whitener and entropy expander. Final data are checked on\-line
using FIPS PUB 140\-2 test to guarantee that we send high entropy random data
to the kernel
.PP
csprngd \fB\-d\fR \fB\-\-entropy_file=\fR/dev/hwrng \fB\-\-additional_source\fR=\fIHAVEGE\fR
.IP
Advanced replacement of the rngd. See also above. TRNG data are processed
first through the derivation function. On top of that HAVEGE RNG is used as
as the additional input of the DRBG
.PP
csprngd \fB\-d\fR \fB\-\-entropy_file=\fR/dev/hwrng \fB\-\-additional_source\fR=\fISHA1_RNG\fR
\fB\-\-max_num_of_blocks\fR=\fI4096\fR
.IP
Works as the entropy expander. Around 0.5MiB of the input entropy data
is needed to generate 1GiB of the random data for the kernel's device
in this particular configuration.
.PP
QRBG_USER=name QRBG_PASSWD=password csprngd \fB\-\-foreground\-\-write_statistics\fR=\fI30\fR
\fB\-\-entropy_source\fR=\fIHTTP_RNG\fR \fB\-\-additional_source\fR=\fIHAVEGE\fR \fB\-\-derivation_function\fR
\fB\-\-max_num_of_blocks\fR=\fI8192\fR
.IP
It will simultaneously use 4 different true random generators
available on the web as the entropy source and HAVEGE RNG
as the additional input source to update the state of CSPRNG generator.
It's recommended to register at http://random.irb.hr/
and supply login credentials using environment variables
QRBG_USER=name and QRBG_PASSWD=password to enable
fast and high quality TRNG http://random.irb.hr/
Please note that daemon will stop sending data in the
case that internet connection will drop down or all
internet services used will become unusable.
.PP
Examples to measure the performance of the /dev/random device
.PP
time dd if=/dev/random count=8192 bs=8192 iflag=fullblock of=/dev/null
.IP
Test the reading speed from the /dev/random device. When csprngd
.IP
is running, reading speed of about 1MiB/s can be expected.
.PP
watch \fB\-n1\fR cat /proc/sys/kernel/random/entropy_avail
.IP
Watch remaining available entropy, update the display every second.
.PP
watch fuser \fB\-uvm\fR /dev/random
.IP
Watch processes accessing /dev/random device
.PP
pkill \fB\-SIGUSR1\fR csprngd; time dd if=/dev/random count=8192 bs=8192
iflag=fullblock of=/dev/null; pkill \fB\-SIGUSR1\fR csprngd
.IP
SIGUSR1 signal will force (already running) csprngd process to output
the statistics information about the length of the bytes generated till now.
Use this code to test the performance of csprngd and kernel's random device.
It's also possible to deduct which portion of the entropy has been
provided by the csprngd.
.PP
watch \fB\-n1\fR \fB\-p\fR "dd if=/dev/random bs=64 count=1 of=/dev/null iflag=fullblock;
cat /proc/sys/kernel/random/entropy_avail"
.IP
Read every second 64 Bytes from the /dev/random device and
print remaining available entropy in bits.
.PP
pv \fB\-L64\fR /dev/random > /dev/null
.IP
Read data from the /dev/random device with average speed of 64B/s
.SH AUTHOR
Written by Jirka Hladky
.SH "REPORTING BUGS"
Report bugs to <hladky DOT jiri AT gmail DOT com>.
.SH COPYRIGHT
Copyright \(co 2011\-2012 by Jirka Hladky
.PP
.br
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
